// Build a Resolver Service (Preventing Partial Page Display)
//movie.resolver.ts
@Injectable()
export class MovieResolver implements Resolve<IMovie> {
  constructor(private movieService: MovieService) { }
  resolve(route: ActivatedRouteSnapshot,
          state: RouterStateSnapshot): Observable<IMovie> {
    const id = route.paramMap.get('id');
    return this.movieService.getMovie(+id);
  }
}
// Register the Resolver
//app.module.ts
 providers: [ MovieService, MovieResolver]
 
//Add Resolver to Route
//app-routing.module.ts
 {
  path: 'movies/:id',
  resolve: { movie: MovieResolver }, 
  component: MovieDetailComponent
 },
 
//Read Resolver Data
//movie-detail.component.ts
 ngOnInit(): void {
   this.movie = this.route.snapshot.data['movie'];
}
======================Spinner======================================
//spinner for entire app
//app.component.ts
constructor(private router: Router){
  router.events.subscribe((routerEvent: Event) =>{
    this.checkRouterEvent(routerEvent);
  });
}
checkRouterEvent(routerEvent: Event):void{
  if(routerEvent instanceof NavigationStart){
    this.loading = true;
  }
  if(routerEvent instanceof NavigationEnd ||
    routerEvent instanceof NavigationCancel ||
    routerEvent instanceof NavgationError){
      this.loading = false;
    }
}

//app.component.html
<span class="glyphicon glyphicon-refresh glyphicon-spin spinner"
      *ngIf="loading"></span>
<router-outlet></router-outlet>


===========================================================
//enable all router events logs
RouterModule.forRoot([{routes}...], {enableTracing: true})

===========================================================
//guard service for candecativate
//movie.edit.guard.ts
@Injectable()
export class MovieEditGuard implements CanDeactivate<MovieEditComponent>{
  canDeactivate(component: MovieEditComponent): boolean{
    if(component.isDirty){
      const title = component.movie.title || 'New Movie';
      return confirm(`Lose all changes to ${title}?`);
    }
    return true;
  }
}
//app-routing.module.ts
{
  path:'movies/:id/edit',
  resolve: {movie: MovieResolver},
  canDeactivate: [MovieEditGuard],
  componet: MovieEditComponent
}

======================Material================================
slides: bit.ly/ngConf18
code: https://github.com/DeborahK/MovieHunter-routing

