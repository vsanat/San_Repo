# Sotre architecture
  1. Data is not tied to any component, data belogs to store service 
  2. If component want data it need to subscribe to store, becasue store is observable 
  3. Components do not modify data directly, it has to be done via store
  4. In order to modify data component need to emit events (not commands) in form of actions.
  5. Store decides whether to modify data in server or in-memory, and it does it by reducers or effects. 
  Then emits new version of data.

# Store is a centralized singleton service, that acts as inmoemory database that contains whole applcation state. 
  In oerder to modify data we need to dispatch an action. 
  
# Reducer: Goal of a reducer fucntion is to calculate new store state in responce to a given action.

# Selector: All subscribers get values on any change in store, in order to get value from perticular change of value
 we can use selectors because it remembers the calculations.
  
  creating selector ///auth.selectors.ts 
  import {createSelector} from '@ngrx/store'
  
  export const selectAuthState = state => state.auth; //one selector
  export const isLoggedIn = createSelector(
    selectAuthState, //here we can inject multiple selectores 
    auth => auth.loggedIn //this is projection, retrun value
  );
  
  export const isLoggedOut = createSelector(
  isLoggedIn,
  loggedIn => !loggedIn
  );
  
  ///use selector
  import {select, Store} from '@ngrx/store'
  import {isLoggedIn} from './auth/auth.selectors';
  
  class Abc..
  isLoggedIn$: Observable<boolean>;
  ngOnInit(){
    this.isLoggedIn$ = this.store.pipe(
      select(isLoggedIn)
    );
  }
  
 # effects: These are the side effects provided by ngrx, using these we can perform another action as an effect of 
  one action. Eg make a db call apart from storing the data in store
  
  -- scaffold
  > ng g effect auth/Auth --module auth/auth.module.ts //this registers all effects in module
  
 auth.effects.ts
 import {Actions, Effect, ofType} from '@ngrx/effects';
 import {AuthActionTypes, Login, Logout} from './auth.actions';
 
 @Injectable()
 export class AuthEffects
 {
  constructor(private actions$:Actions, private router:Router){}
  
  @Effect({dispatch:false}) //dispatch false means its not going to trigger any other action
  login$ = this.actions$.pipe(
    ofType<Login>(AuthActionTypes.LoginAction),
    tap(action => localStorage.setItem("user", JSON.stringify(action.payload.user)))
  );
  
  @Effect({dispactch:false})
  logout$ = this.actions$.pipe(
    ofType<Logout>(AuthActionTypes.LogoutAction),
    tap(() => {
      localStorage.removeItem("user");
      this.router.navigateByUrl('/login');
    })
  );
 }
  
  //initialization side effect
  //surviving refresh from the browser, this is also called initialization side effect
  //this will create an observable when this class is instantiated
 @Effect() //here we didn't write dispatch false because it dispathes one action(return action/observable)
 //defer is function provided by rxjs this operator waits for someone to subscribe to this observable
 //before creating observable
 init$ = defer(() => {
    const userData = localStorage.getItem("user");
    if(userData){
      retrun of(new Login(JSON.parse(userData)));
    } else {
      return of(new Logout());
    }
 });

# problem when we mutate the state 
  - on-push change detection will not work, it works only on object reference change 
  - we may beake the development tool, because it keeps the snapshot of multiple states so we can do time-travel
  
# ngrx-store-freeze: its a meta reducer that prevents the state from being mutated
  - it freezes the current state
  - when mutation occures, an exception will be thrown
  - should be used only in development mode 
  - npm i ngrx-store-freeze --save-dev
  
  //index.ts
  export const metaReducers: MetaReducer<AppState>[] = 
    !environment.production ? [storeFreeze] : [];
  //Meta Reducer is special type of reducer which applies after all reducers are completed
  
# ngrx/router-store: We can use this to enable time travel in develpoment mode. It provides 
  bindings between angular router and store. We should do custom router serialization to 
  reduce performance issues. See documentations for Custom Router State Serializer 
  
  
  
  
  
  
