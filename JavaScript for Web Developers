=============================JavaScript for Web Developers ===========================================
Ecma => European computor manufacturers association, stadndardized the js, and new scripting language called ECMAScript

SVG => Scalable Vector Graphics

BOM => Browser Object Model 
  > new popup window
  > move, resize and close browser window
  > the navigator object which provides detailed info about the browser
  > the location object, which gived detailed info about the page loaded in the browser
  > the screen object, which gives info about user's screen resolution
  > support of cookies

JavaScript => has three distinct parts 
  > ECMA script: which provides core functionality
  > DOM: which provides methods and interfaces for working with the content of a web page
  > BOM: which provides methods and interfaces for interacting with the browser

<script> tag => there are six attributes for the <script> element
  > async: optional, indicates script should begin downlading immidiately but should not prevent other actions on the 
    page such as downloading resources or waiting for other scripts to load.
  > charset: optional 
  > defer: optional, indicates that the download should begin immediately but execution of the script can safely be 
    deffered until the document prsing has been completely parsed and displayed, valid for external scripts
  > language: deprecated
  > src: optional, indicates external file that contains code to be executed
  > type: optional, text/javascript, text/ecmascript

</script> => we can not have "</script>" tag anywhere in our, it throws error
  alert("</script>") -> invalid or unexpected token, to overcome this error we can escepe "/" by doing "<\/script>"

# include js file from external location: <script type="text/javascript" src="external.js"></script>
  note that a <script> element using src attribute should not include additional JavaScript code between <script> and 
    </script> tags. If both are provided, the script file downloaded and executed while inline code is ignored.
  One of the most powerful and most controversial parts of <script> element is its ability to include JavaScript files 
    from outside domains.
    
# benefit of using external js files: browser caches all externally linked js files as per the browser settings

# document modes:
  html5 mode => <!DOCTYPE html>

# <noscript> element: can be used in case if JavaScript is disabled in the browser, we can use any element inside noscript
  <npscript>
    <p>Please enable JavaScript</p>
  </noscript>  

# interpretation: all <script> elements are interpreted in the order in which they occur on the page, for nondeferred scripts
  the browser must complete interpretation of the code inside <script> element before it can continue rendering the 
  rest of the page. For this reason <script> elements are usually included towards the end of the page. We can defer the
  execution of the script untill the document has rendered by using 'defer' attribute.

# "use strict": it's a pragma which tells JavaScript engine to run into strict mode

# In typescript class member cannot have let, var or const. But scope(function) variable must have let, var or const

# var keyword: inside a function if we use var it makes local varibale to the function, as soon as function exits
  it deletes the variable from memory. But if we create a variable without 'var' it makes it global variable
  function test(){
    var message = 'hi';
  }
  test();
  alert(message);// error
  
  function test(){
    message = 'hi';
  }
  test();
  alert(message);// hi
  
  https://dev.to/sarah_chima/var-let-and-const--whats-the-difference-69e







