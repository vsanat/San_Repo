=============================JavaScript for Web Developers ===========================================
Ecma => European computor manufacturers association, stadndardized the js, and new scripting language called ECMAScript

SVG => Scalable Vector Graphics

BOM => Browser Object Model 
  > new popup window
  > move, resize and close browser window
  > the navigator object which provides detailed info about the browser
  > the location object, which gived detailed info about the page loaded in the browser
  > the screen object, which gives info about user's screen resolution
  > support of cookies

JavaScript => has three distinct parts 
  > ECMA script: which provides core functionality
  > DOM: which provides methods and interfaces for working with the content of a web page
  > BOM: which provides methods and interfaces for interacting with the browser

<script> tag => there are six attributes for the <script> element
  > async: optional, indicates script should begin downlading immidiately but should not prevent other actions on the 
    page such as downloading resources or waiting for other scripts to load.
  > charset: optional 
  > defer: optional, indicates that the download should begin immediately but execution of the script can safely be 
    deffered until the document prsing has been completely parsed and displayed, valid for external scripts
  > language: deprecated
  > src: optional, indicates external file that contains code to be executed
  > type: optional, text/javascript, text/ecmascript

</script> => we can not have "</script>" tag anywhere in our, it throws error
  alert("</script>") -> invalid or unexpected token, to overcome this error we can escepe "/" by doing "<\/script>"

# include js file from external location: <script type="text/javascript" src="external.js"></script>
  note that a <script> element using src attribute should not include additional JavaScript code between <script> and 
    </script> tags. If both are provided, the script file downloaded and executed while inline code is ignored.
  One of the most powerful and most controversial parts of <script> element is its ability to include JavaScript files 
    from outside domains.
    
# benefit of using external js files: browser caches all externally linked js files as per the browser settings

# document modes:
  html5 mode => <!DOCTYPE html>

# <noscript> element: can be used in case if JavaScript is disabled in the browser, we can use any element inside noscript
  <npscript>
    <p>Please enable JavaScript</p>
  </noscript>  

# interpretation: all <script> elements are interpreted in the order in which they occur on the page, for nondeferred scripts
  the browser must complete interpretation of the code inside <script> element before it can continue rendering the 
  rest of the page. For this reason <script> elements are usually included towards the end of the page. We can defer the
  execution of the script untill the document has rendered by using 'defer' attribute.

# "use strict": it's a pragma which tells JavaScript engine to run into strict mode

# In typescript class member cannot have let, var or const. But scope(function) variable must have let, var or const

# var keyword: inside a function if we use var it makes local varibale to the function, as soon as function exits
  it deletes the variable from memory. But if we create a variable without 'var' it makes it global variable
  function test(){
    var message = 'hi';
  }
  test();
  alert(message);// error
  
  function test(){
    message = 'hi';
  }
  test();
  alert(message);// hi
  
  https://dev.to/sarah_chima/var-let-and-const--whats-the-difference-69e

# data types: 5 primitive data types and 1 complex data type 
  Undefined, Null, Boolean, Number, String and Object 

# myvar; => error myvar is not defined. 
  either we have to do var myvar; or let myvar or const myvar or we have to initialize with some value myvar = '';
  else not defined error. 

# in JavaScript we can not define the type of variable while declaring it. It is always decides at run time.
  We can use typeof keyword to check the type of a variable. Type of function is object
  but typeof may confuse sometime
  var message;
  console.log(typeof message); => undefined
  console.log(typeof age); => undefined

# Null type: Logically null value is an empty object pointer, which is why typeof returns 'object' when it's passed a null
  value in the following example
  var car = null;
  c.l(typeopf car); => ojbect
  undefined is derivative of null, so ECMA-262 defines them to be superfivially equals 
  c.l(null == undefined); => true

# All type of values have Boolean equivalents in ECMAScript
  var test = 'abcd'; or {}, 1
  c.l.(Boolean(test)); => true
  
  var test = 0; '',null,undefined
  c.l.(Boolean(test)); => false
  
  this is what happens in if statement

# rounding error in JavaScript(this error is not related to JS its becuase of  IEEE-754 based numbers)
  c.l.(.1+.2) => 0.30000000000000004
  c.l(.1+.02) => 0.12000000000000001

# range of values
  console.log(Number.MAX_VALUE); => 1.7976931348623157e+308
  console.log(Number.MIN_VALUE); => 5e-324
  any value beyond these sizes is calle Infinity and -Infinity
  There is a function to check if the value is within JS's range
  isFinite(00007878); => true

# NaN: This is a special numeric value, which used to inidicate when an operation intended to return number has failed.
  eg divide by 0. Any operation involved with NaN returns NaN, and NaN is not equal to any value including NaN. 
  c.l.(isNan(NaN)); true
  c.l.(isNan(10)); false
  c.l.(isNan('10')); false
  c.l.(isNan('blue')); true
  c.l.(isNan(true)); false => it can be converted to 1

# Number conversions, + is same as Number function
  console.log(Number(' ')); //0
  console.log(parseInt(' ')); //NaN
  console.log(Number(false)); //0
  console.log(parseInt(false)); //NaN
  console.log(parseInt(1.999)); //1
  console.log(parseFloat(1.999.5)); //1.999
  
  console.log(Number('23q3qwqw')); //NaN
  console.log(parseInt('23q3qwqw')); //23 it looks till first non numeric charactor
  console.log(parseFloat('23.3qwqw')); //23.3
  
  parseInt can also accept radix values 8(octal), 10(decimal), 16(hexadecimal)
  parseInt('070', 8); => 56
  parseInt('070', 10); => 70
  parseInt('070', 16); => 112
  parseInt('AF', 16); => 175 or parseInt('0xAF')
  parseInt('AF'); => NaN

# character literals
  \n => new line
  \t => tab
  \b => backspace
  \n => new line
  \' => single quote
  \" => double quote
  console.log('abcd\'efghi') => abcd'efghi
  {}.toString() => to string of object is [object object]

# object type
  var o = {};
  o.name = 'san';
  var o1 = new Object(); or new Object;
  o1.name = 'man';
  o and o1 both are same
  
# Unray operators: 1. increment and decrement operators: two types of operators here prefix and postfix
  prefix increment or decrement => ++num or --num
  var age = 20;
  var anotherAge = ++age + 2
  c.l.(age); => 21
  c.l.(anotherAge); => 31
  ** prefix increment or decrement changes the value before even the satement is evaluated
  
  var num1 = 2;
  var num2 = 20;
  var num3 = --num1 + num2; => 21
  var num4 = num1 + num2; => 21
  
  ** postfix increment or decrement doesn't occur until after the containing statement has been evaluated.
  var num1 = 2;
  var num2 = 20;
  var num3 = num1-- + num2; => 22
  var num4 = num1 + num2; => 21
  
  
  
  
  
  
  
  
