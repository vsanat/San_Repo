# interval, timer 

# conaact, concatMap => concatinates all streams, waits untill the first one is completed

# merge, mergeMap => merges all the streams, do not wait does parallel calls  

# exhaustMap => waits for first to comeplte ignore all others in between (save button click mulptiples times)

# switchMap => emits latest only, unsubscribes current one if it gets new one (typeahead server calls)

# debounceTime => waits untill the stream is stabled for given time

# distinctUntilChanged

# use object/array destructuring

# use spread operators

# .pipe(...catchError()) throwError both should return obesrvable

#  inside pipe everything must return obesrvable

#  Observable.create(observer => {
      observer.next(some value),
      observer.error(throw error), //error and complete are mutually exclusive
      observer.complete()
    })
    
    const http$ = Observable.create( observer => {
            fetch('api/courses')
            .then(response => {
                  return response.json();
            })
            .then(body => {
                  observer.next(body);
                  observer.complete();
            })
            .catch(err => {
                  observer.error(err);
            })
      });
      
# <table *ngIf="(lessons$ | async) as lessons" >
      <tr *ngFor="let lesson of lessons">
            <td>{{lesson.title}}</td>

# shareReplay
      beginnerCourses$: Observable<Course[]>;
      advancedCourses$: Observable<Course[]>;
      
      const courses$ = http$.pipe(
            map(res => Object.values(res["payload"])),
            shareReplay()
      );
      
      this.beginnerCourses$ = courses$
            .pipe(
                  map((courses) =>courses.filter(course => course.category == 'BEGINNER'))
            ); //subscribe this in HTML
            
      this.advancedCourses$ = courses$
            .pipe(
                  map((courses) =>courses.filter(course => course.category == 'ADVANCED'))
            ); //subscribe this in HTML     

# reactive form auto save
      this.form.valueChanges.pipe(
                  filter(() => this.form.valid),
                  concatMap(changes => this.saveCourse(changes)) //saveCourse is http call
           ).subscribe();

# fetch api abortController
      const http$ = Observable.create( observer => {
            const controller = new AbortController();
            const signal = controller.signal;
            
            fetch('api/courses', {signal})
            .then(response => {
                  return response.json();
            })
            .then(body => {
                  observer.next(body);
                  observer.complete();
            })
            .catch(err => {
                  observer.error(err);
            })
            
            return () => cotroller.abort(); 
            //return value of an observer is always unsubscription function
      });
      
 # typeahead
      ngAfterViewInit(){
           this.lessons$ = fromEvent(this.input.nativeElement, "keyup")
                           .pipe(
                              map(event => event.traget.value)
                              ,startWith('') //this will emit '' for initialization
                              ,debounceTime(400) //wait for 400ms when user stops typing
                              ,distinctUntilChanged() //take unique valuse, when shift key press same value appears twice
                              ,switchMap(search => this.loadLessons(search))
                           );
      }

# custom RxJS debugger
      export const debug = (level: number, message: stirng) => 
                   (source: Observable<any>) => source.pipe(
                        tap(val =>{
                              if(level >= rxjsLogginLevel){
                                    console.log(message + ':', val);
                              }
                        }
                     ) //tap end
                   ) //pipe end
      //this is called higher order function becuase this is a function which returns a function(of type observable here)
      
      fromEvent(this.input.nativeElement, "keyup")
                           .pipe(
                              map(event => event.traget.value)
                              ,startWith('') //this will emit '' for initialization
                              ,debug(rxjsDebugLevel.INFO, "search") // we are passing current observable val in function
                              ,debounceTime(400) //wait for 400ms when user stops typing
                              ,distinctUntilChanged() //take unique valuse, when shift key press same value appears twice
                              ,switchMap(search => this.loadLessons(search))
                              ,debug(rxjsDebugLevel.INFO, "lesson value")
                           );

# forkJoin
      const course$ = createHTTPObservable('api/course/courseid');
      const lesson$ = createHTTPObservable('api/lesson');
      forkJoin(course$, lesson$).pipe(
            tap((course, lesson) => {
                  console.log('course', course);
                  console.log('lesson', lesson);
            }) //tap end
      ) //pipe end

      
