# interval, timer 

# conaact, concatMap => concatinates all streams, waits untill the first one is completed

# merge, mergeMap => merges all the streams, do not wait does parallel calls  

# exhaustMap => waits for first to comeplte ignore all others in between (save button click mulptiples times)

# switchMap => emits latest only, unsubscribes current one if it gets new one (typeahead server calls)

# debounceTime => waits untill the stream is stabled for given time

# distinctUntilChanged

# use object/array destructuring

# use spread operators

# .pipe(...catchError()) throwError both should return obesrvable

#  inside pipe everything must return obesrvable

#  Observable.create(observer => {
      observer.next(some value),
      observer.error(throw error), //error and complete are mutually exclusive
      observer.complete()
    })
    
    const http$ = Observable.create( observer => {
            fetch('api/courses')
            .then(response => {
                  return response.json();
            })
            .then(body => {
                  observer.next(body);
                  observer.complete();
            })
            .catch(err => {
                  observer.error(err);
            })
      });
      
# <table *ngIf="(lessons$ | async) as lessons" >
      <tr *ngFor="let lesson of lessons">
            <td>{{lesson.title}}</td>

# shareReplay
      beginnerCourses$: Observable<Course[]>;
      advancedCourses$: Observable<Course[]>;
      
      const courses$ = http$.pipe(
            map(res => Object.values(res["payload"])),
            shareReplay()
      );
      
      this.beginnerCourses$ = courses$
            .pipe(
                  map((courses) =>courses.filter(course => course.category == 'BEGINNER'))
            ); //subscribe this in HTML
            
      this.advancedCourses$ = courses$
            .pipe(
                  map((courses) =>courses.filter(course => course.category == 'ADVANCED'))
            ); //subscribe this in HTML     

# reactive form auto save
      this.form.valueChanges.pipe(
                  filter(() => this.form.valid),
                  concatMap(changes => this.saveCourse(changes)) //saveCourse is http call
           ).subscribe();

# fetch api abortController
      const http$ = Observable.create( observer => {
            const controller = new AbortController();
            const signal = controller.signal;
            
            fetch('api/courses', {signal})
            .then(response => {
                  return response.json();
            })
            .then(body => {
                  observer.next(body);
                  observer.complete();
            })
            .catch(err => {
                  observer.error(err);
            })
            
            return () => cotroller.abort(); 
            //return value of an observer is always unsubscription function
      });
      
 # typeahead
      ngAfterViewInit(){
           this.lessons$ = fromEvent(this.input.nativeElement, "keyup")
                           .pipe(
                              map(event => event.traget.value)
                              ,startWith('') //this will emit '' for initialization
                              ,debounceTime(400) //wait for 400ms when user stops typing
                              ,distinctUntilChanged() //take unique valuse, when shift key press same value appears twice
                              ,switchMap(search => this.loadLessons(search))
                           );
      }

# custom RxJS debugger
      export const debug = (level: number, message: stirng) => 
                   (source: Observable<any>) => source.pipe(
                        tap(val =>{
                              if(level >= rxjsLogginLevel){
                                    console.log(message + ':', val);
                              }
                        }
                     ) //tap end
                   ) //pipe end
      //this is called higher order function becuase this is a function which returns a function(of type observable here)
      
      fromEvent(this.input.nativeElement, "keyup")
                           .pipe(
                              map(event => event.traget.value)
                              ,startWith('') //this will emit '' for initialization
                              ,debug(rxjsDebugLevel.INFO, "search") // we are passing current observable val in function
                              ,debounceTime(400) //wait for 400ms when user stops typing
                              ,distinctUntilChanged() //take unique valuse, when shift key press same value appears twice
                              ,switchMap(search => this.loadLessons(search))
                              ,debug(rxjsDebugLevel.INFO, "lesson value")
                           );

# forkJoin
      const course$ = createHTTPObservable('api/course/courseid');
      const lesson$ = createHTTPObservable('api/lesson');
      forkJoin(course$, lesson$).pipe(
            tap(([course, lesson]) => {
                  console.log('course', course);
                  console.log('lesson', lesson);
            }) //tap end
      ) //pipe end

# subject is simultaneously observer and observable, there is no clear seperation between them
      we should keep subject private so nobody can accidently emit value on behalf of subject 
      
      const subject = new Subject(); //this should be private
      
      const series$ = subject.asObservable(); // this we can public because it has only subscribe method
      series$.subscribe((val)=>console.log("early subscription", val)); //here its observable
      
      subject.next(1); //here its observer
      subject.next(2);
      subject.next(3);
      
      //Subject has no memory by default, so we can not use it for late subcription
      setTimeout(()=>{
            series$.subscribe((val)=>console.log("late subscription", val)); //prints nothing
             subject.next(4); // both subscriber will receive the value
      }, 3000)
      
      subject.complete();

# BehaviourSubject: unlike the Subject it remembers the last emitted value unless it's complete.
      We also have to provide initial value to BehaviourSubject
      
      const subject = new BehaviourSubject(0);
      
      const series$ = subject.asObservable();
      series$.subscribe((val)=> console.log("early subscription", val)); //0,1,2,3
      
      subject.next(1);
      subject.next(2);
      subject.next(3);
      
      //subject.complete(); //if we it complete here then late subscriber will not receive any value
      
      setTimeout(()=>{
            series$.subscribe((val)=>console.log("late subscription", val)); //prints 3
             subject.next(4); // both subscriber will receive the value
      }, 3000)
      
      subject.complete();

# AsyncSubject: this could be used for long running calculations, this emits only one value just before the completion,
      and discards all intermediate values, and similar to Behaviuor Subject this also remebers the last value
      
      const subject = new AsyncSubject();
      
      const series$ = subject.asObservable();
      series$.subscribe((val)=> console.log("early subscription", val)); //3
      
      subject.next(1);
      subject.next(2);
      subject.next(3);
      
      subject.complete();
      
      setTimeout(()=>{
            series$.subscribe((val)=>console.log("late subscription", val)); //3 
            //it remembers last value even after completion
      }, 3000)

# ReplaySubject: This emits all the values to all the subscribers(early/late) regardless of its completion
      
      const subject = new ReplaySubject();
      
      const series$ = subject.asObservable();
      series$.subscribe((val)=> console.log("early subscription", val)); //1,2,3
      
      subject.next(1);
      subject.next(2);
      subject.next(3);
      
      subject.complete(); //even after completion it remembers all emitted values and replay it to the late subscribers
      
      setTimeout(()=>{
            series$.subscribe((val)=>console.log("late subscription", val)); //1,2,3 
      }, 3000)



